npx create-react-app chat-app
cd chat-app
import React from 'react';

function App() {
  return (
    <div className="App">
      // Our components will go here
    </div>
  );
}

export default App;
npm install socket.io-client
import { io } from "socket.io-client";

const socket = io('http://localhost:3000');
import React from 'react';

function ChatRoom() {
  return (
    <div className="chat-room">
      // The chat room components will go here
    </div>
  );
}

export default ChatRoom;

import React from 'react';

function ChatMessage({ message }) {
  return (
    <div className="chat-message">
      <p>{message.user}: {message.text}</p>
    </div>
  );
}

export default ChatMessage;

import React, { useState, useEffect } from 'react';

function ChatRoom() {
  const [messages, setMessages] = useState([]);
  const [users, setUsers] = useState([]);

  // More code will go here

  return (
    <div className="chat-room">
      // The chat room components will go here
    </div>
  );
}

export default ChatRoom;

import React, { useState, useEffect } from 'react';
import { io } from "socket.io-client";

const socket = io('http://localhost:3000');

function ChatRoom() {
  const [messages, setMessages] = useState([]);
  const [messageText, setMessageText] = useState('');

  // Send a message
  const sendMessage = () => {
    socket.emit('message', messageText);
    setMessageText('');
  };

  // Receive messages
  useEffect(() => {
    socket.on('message', (message) => {
      setMessages(messages => [...messages, message]);
    });
  }, []);

  // More code will go here

  return (
    <div className="chat-room">
      // The chat room components will go here
    </div>
  );
}

export default ChatRoom;

import React, { useState, useEffect } from 'react';
import { io } from "socket.io-client";

const socket = io('http://localhost:3000');

function ChatRoom() {
  const [messages, setMessages] = useState([]);
  const [messageText, setMessageText] = useState('');
  const [user, setUser] = useState(null);

  // Join a chat room
  const joinChatRoom = (userDetails) => {
    setUser(userDetails);
    socket.emit('join', userDetails);
  };

  // Leave a chat room
  const leaveChatRoom = () => {
    socket.emit('leave', user);
    setUser(null);
  };

  // More code will go here

  return (
    <div className="chat-room">
      // The chat room components will go here
    </div>
  );
}

export default ChatRoom;

npm install react-router-dom

import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import HomePage from './components/HomePage';
import ChatRoom from './components/ChatRoom';
import UserProfile from './components/UserProfile';

function App() {
  return (
    <Router>
      <Switch>
        <Route path="/" exact component={HomePage} />
        <Route path="/chat" component={ChatRoom} />
        <Route path="/profile" component={UserProfile} />
      </Switch>
    </Router>
  );
}

export default App;

import React from 'react';
import './App.css';

// More code will go here

export default App;

.chat-room {
  background-color: #f5f5f5;
  display: flex;
  flex-direction: column;
  padding: 20px;
}

.chat-message {
  font-size: 16px;
  margin-bottom: 10px;
}

.user-list {
  display: flex;
  flex-direction: column;
  margin-top: 20px;
}

npm install firebase

import React from 'react';
import firebase from 'firebase/app';
import 'firebase/auth';

const firebaseConfig = {
  // Your Firebase configuration goes here
};

firebase.initializeApp(firebaseConfig);

// More code will go here

export default App;

useEffect(() => {
  localStorage.setItem('messages', JSON.stringify(messages));
}, [messages]);

const [messages, setMessages] = useState(
  JSON.parse(localStorage.getItem('messages')) || []
);

npm install -g firebase-tools

firebase login

firebase init

firebase deploy

npm install --save-dev jest

import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});
